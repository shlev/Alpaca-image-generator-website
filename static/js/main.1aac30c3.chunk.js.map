{"version":3,"sources":["components/Header.js","components/ActionButton.js","components/Preview.js","components/ButtonOption.js","components/ButtonsList.js","alpaca.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","ActionButton","props","caption","performAction","iconClass","onClick","type","Preview","readyImages","selectedOptions","categories","save","resetSave","canvasRef","useRef","addImage","img","Promise","resolve","reject","onload","onerror","drawAlpacaImages","forEach","current","getContext","drawImage","folder","filename","a","src","Image","push","length","drawAlpaca","clearRect","category","addToCanvas","useEffect","toDataURL","link","document","createElement","href","download","click","downloadImage","ref","width","height","ButtonOption","isActive","selected","updateOption","ButtonsList","headerText","updateSelectedListItem","selectedCategory","updateList","map","cat","alpaca","backgrounds","ears","hair","neck","nose","eyes","accessories","leg","mouth","App","initSelectedOptions","useState","setSelectedCategory","setSelectedOptions","setSave","categoryOptions","randomOptionIndex","Math","floor","random","newCategory","updatedOption","updated","updateSelectedOptions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1aac30c3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n  return (\n    <div className=\"header-container\">\n      <span className=\"main-header\">Alpaca Image Generator</span>\n      <span className=\"sub-header\">by Al Paca</span>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function ActionButton(props) {\n  const { caption, performAction, iconClass } = props;\n\n  function handleClick() {\n    performAction();\n  }\n  return (\n    <button onClick={handleClick} type=\"button\" className=\"btn btn-lg\">\n      <i className={iconClass} />\n      {caption}\n    </button>\n  );\n}\n","/* eslint-disable no-param-reassign */\nimport React, { useRef, useEffect } from 'react';\n// import ImagePart from './ImagePart';\n\nfunction Preview(props) {\n  const {\n    selectedOptions, categories, save, resetSave,\n  } = props;\n\n  const canvasRef = useRef(null);\n\n  let readyImages;\n\n  function downloadImage() {\n    if (save) {\n      const img = canvasRef.current.toDataURL();\n      const link = document.createElement('a');\n      link.href = img;\n      link.download = 'alpaca.png';\n      link.click();\n      resetSave();\n    }\n  }\n  useEffect(() => {\n    downloadImage();\n  }, [save]);\n\n  function addImage(img) {\n    return new Promise((resolve, reject) => {\n      img.onload = () => resolve();\n      img.onerror = reject;\n    });\n  }\n\n  function drawAlpacaImages() {\n    readyImages.forEach((img) => {\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.drawImage(img, 0, 0, 400, 400);\n    });\n  }\n\n  async function addToCanvas(folder, filename) {\n    const src = `/alpaca/${folder}/${filename}.png`;\n    const img = new Image();\n    img.src = src;\n    readyImages.push(img);\n    await addImage(img);\n\n    if (readyImages.length === categories.length) {\n      drawAlpacaImages();\n    }\n  }\n\n  function resetCanvas() {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, 400, 400);\n  }\n\n  function drawAlpaca() {\n    resetCanvas();\n    readyImages = [];\n    categories.forEach((category) => addToCanvas(category, selectedOptions[category]));\n  }\n\n  useEffect(() => {\n    drawAlpaca();\n  });\n\n  return (\n    <div className=\"preview-container\">\n      <canvas ref={canvasRef} width={400} height={400} />\n    </div>\n  );\n}\n\nexport default Preview;\n","import React from 'react';\n\nexport default function ButtonOption(props) {\n  const { caption, selected: isActive, updateOption } = props;\n\n  function handleClick() {\n    updateOption(caption);\n  }\n  return (\n    <button onClick={handleClick} className={`btn btn-md ${isActive ? 'btn-active' : ''}`} type=\"button\">{caption}</button>\n  );\n}\n","import React from 'react';\nimport ButtonOption from './ButtonOption';\n\nexport default function ButtonsList(props) {\n  const {\n    categories,\n    selected,\n    headerText,\n    updateSelectedListItem,\n  } = props;\n  const selectedCategory = selected;\n\n  function updateList(category) {\n    updateSelectedListItem(category);\n  }\n  return (\n    <div className=\"buttons-container\">\n      <h1>{headerText}</h1>\n      <div className=\"btn-container\">\n        {categories.map((cat) => (\n          // eslint-disable-next-line max-len\n          <ButtonOption\n            key={cat}\n            caption={cat}\n            selected={cat === selectedCategory}\n            updateOption={updateList}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","const alpaca = {\n  backgrounds: ['blue50', 'blue60', 'blue70', 'darkblue30', 'darkblue50', 'darkblue70', 'green50', 'green60', 'green70', 'grey40', 'grey70', 'grey80', 'red50', 'red60', 'red70', 'yellow50', 'yellow60', 'yellow70'],\n  ears: ['default', 'tilt-backward', 'tilt-forward'],\n  hair: ['bang', 'curls', 'default', 'elegant', 'fancy', 'quiff', 'short'],\n  neck: ['bend-backward', 'bend-forward', 'default', 'thick'],\n  nose: ['nose'],\n  eyes: ['angry', 'default', 'naughty', 'panda', 'smart', 'star'],\n  accessories: ['earings', 'flower', 'glasses', 'headphone'],\n  leg: ['bubble-tea', 'cookie', 'default', 'game-console', 'tilt-backward', 'tilt-forward'],\n  mouth: ['astonished', 'default', 'eating', 'laugh', 'tongue'],\n};\n\nexport default alpaca;\n","/* eslint-disable no-alert */\n/* eslint-disable arrow-parens */\n/* eslint-disable max-len */\nimport { useState } from 'react';\nimport Header from './components/Header';\nimport ActionButton from './components/ActionButton';\nimport Preview from './components/Preview';\nimport ButtonsList from './components/ButtonsList';\nimport alpaca from './alpaca';\n\nfunction App() {\n  const categories = ['backgrounds', 'ears', 'neck', 'hair', 'nose', 'mouth', 'eyes', 'accessories', 'leg'];\n  let initSelectedOptions = {};\n  categories.forEach(category => {\n    initSelectedOptions = { ...initSelectedOptions, [category]: alpaca[category][0] };\n  });\n\n  const [selectedCategory, setSelectedCategory] = useState(categories[0]);\n  const [selectedOptions, setSelectedOptions] = useState(initSelectedOptions);\n  const [save, setSave] = useState(false);\n\n  function updateSelectedOptions(updatedOption) {\n    const updated = { ...selectedOptions, [selectedCategory]: updatedOption };\n    setSelectedOptions(updated);\n  }\n\n  function resetSaveApp() {\n    setSave(false);\n  }\n\n  function updateCategory(newCategory) {\n    setSelectedCategory(newCategory);\n  }\n\n  function updateOption(updatedOption) {\n    updateSelectedOptions(updatedOption);\n  }\n\n  function downloadImage() {\n    setSave(true);\n  }\n\n  function selectRandom() {\n    initSelectedOptions = {};\n    categories.forEach(category => {\n      const categoryOptions = alpaca[category];\n      const randomOptionIndex = Math.floor(Math.random() * categoryOptions.length);\n      initSelectedOptions = { ...initSelectedOptions, [category]: alpaca[category][randomOptionIndex] };\n    });\n    setSelectedOptions(initSelectedOptions);\n  }\n  return (\n    <div className=\"container\">\n      <Header />\n      <div className=\"content\">\n        <div>\n          <Preview selectedOptions={selectedOptions} categories={categories} save={save} resetSave={resetSaveApp} />\n          <div className=\"command-buttons\">\n            <ActionButton performAction={selectRandom} caption=\"random\" iconClass=\"fas fa-random\" />\n            <ActionButton performAction={downloadImage} caption=\"download\" iconClass=\"far fa-save\" />\n          </div>\n        </div>\n\n        <div className=\"selection\">\n          <ButtonsList updateSelectedListItem={updateCategory} categories={categories} selected={selectedCategory} headerText=\"Accessorize your Alpaca\" />\n          <ButtonsList updateSelectedListItem={updateOption} categories={alpaca[selectedCategory]} selected={selectedOptions[selectedCategory]} headerText={selectedCategory} />\n        </div>\n\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}